/*
 * Zona.java
 *
 * Generated with Matisse Schema Definition Language 9.1.12
 * Generation date: Mon Feb 17 13:35:52 2020
 */
// Note: the package and extends declarations are generated by mt_sdl, do not modify them
package inmobiliaria;

import com.matisse.reflect.*;

/**
 * <code>Zona</code> is a schema class generated by <code>mt_sdl</code>. Any
 * user-written classes will be found at the end of the file, after the '// END
 * of Matisse SDL Generated Code' comment. Attribute types, default values, and
 * relationship minimum and maximum cardinality are stored in the database
 * itself, not in this source code. For more information, see <i>Getting Started
 * with MATISSE</i>.
 */
public class Zona extends com.matisse.reflect.MtObject {

    // BEGIN Matisse SDL Generated Code
    // DO NOT MODIFY UNTIL THE 'END of Matisse SDL Generated Code' MARK BELOW
    /*
     * Generated with Matisse Schema Definition Language 9.1.12
     * Generation Date: Mon Feb 17 13:35:52 2020
     */

 /*
     * Class variables and methods
     */
    /**
     * Class <code>Zona</code> cache ID
     */
    private static int CID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtClass.Loader("inmobiliaria.Zona"));

    /**
     * Gets the <code>Zona</code> class descriptor. This method supports
     * advanced MATISSE programming techniques such as dynamically modifying the
     * schema.
     *
     * @param db a database
     * @return a class descriptor
     */
    public static com.matisse.reflect.MtClass getClass(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtClass) db.getCachedObject(CID);
    }

    /**
     * Factory constructor. This constructor is called by
     * <code>MtObjectFactory</code>. It is public for technical reasons but is
     * not intended to be called directly by user methods.
     *
     * @param db a database
     * @param mtOid an existing object ID in the database
     */
    public Zona(com.matisse.MtDatabase db, int mtOid) {
        super(db, mtOid);
    }

    /**
     * Cascaded constructor, used by subclasses to create a new object in the
     * database. It is protected for technical reasons but is not intended to be
     * called directly by user methods.
     *
     * @param mtCls a class descriptor (the class to instantiate)
     */
    protected Zona(com.matisse.reflect.MtClass mtCls) {
        super(mtCls);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     *
     * @param <E> a MtObject class * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>instanceIterator(Zona.class);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     *
     * @param <E> a MtObject class * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server
     * at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>instanceIterator(numObjPerBuffer, Zona.class);
    }

    /**
     * Counts the number of instances of this class (and its subclasses).
     *
     * @param db a database
     * @return total number of instances
     */
    public static long getInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getInstanceNumber();
    }

    /**
     * Opens an iterator on all own instances of this class (excluding
     * subclasses).
     *
     * @param <E> a MtObject class * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>ownInstanceIterator(Zona.class);
    }

    /**
     * Opens an iterator on all own instances of this class (excluding
     * subclasses).
     *
     * @param <E> a MtObject class * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server
     * at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>ownInstanceIterator(numObjPerBuffer, Zona.class);
    }

    /**
     * Counts the number of own instances of this class (excluding subclasses).
     *
     * @param db a database
     * @return total number of instances
     */
    public static long getOwnInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getOwnInstanceNumber();
    }

    /*
     * Attribute access methods
     */

 /* Attribute 'nombre' */
    /**
     * Attribute <code>nombre</code> cache ID
     */
    private static int nombreCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("nombre", CID));

    /**
     * Gets the <code>nombre</code> attribute descriptor. This method supports
     * advanced MATISSE programming techniques such as dynamically modifying the
     * schema.
     *
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getNombreAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute) db.getCachedObject(nombreCID);
    }

    /**
     * Gets the <code>nombre</code> attribute value.
     *
     * @return the value
     *
     * @see #setNombre
     * @see #removeNombre
     */
    public final String getNombre() {
        return getString(getNombreAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>nombre</code> attribute value.
     *
     * @param val the new value
     *
     * @see #getNombre
     * @see #removeNombre
     */
    public final void setNombre(String val) {
        setString(getNombreAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>nombre</code> attribute value. Falls back to
     * the default value is there is one. If the attribute has no default value,
     * it must be set to a new value before commit.
     *
     * @see #getNombre
     * @see #setNombre
     */
    public final void removeNombre() {
        removeValue(getNombreAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     *
     * @return true if null value
     *
     * @see #getNombre
     * @see #setNombre
     */
    public final boolean isNombreNull() {
        return isNull(getNombreAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     *
     * @return true if default value
     *
     * @see #getNombre
     * @see #setNombre
     */
    public final boolean isNombreDefaultValue() {
        return isDefaultValue(getNombreAttribute(getMtDatabase()));
    }


    /* Attribute 'valorxmetro' */
    /**
     * Attribute <code>valorxmetro</code> cache ID
     */
    private static int valorxmetroCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("valorxmetro", CID));

    /**
     * Gets the <code>valorxmetro</code> attribute descriptor. This method
     * supports advanced MATISSE programming techniques such as dynamically
     * modifying the schema.
     *
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getValorxmetroAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute) db.getCachedObject(valorxmetroCID);
    }

    /**
     * Gets the <code>valorxmetro</code> attribute value.
     *
     * @return the value
     *
     * @see #setValorxmetro
     * @see #removeValorxmetro
     */
    public final int getValorxmetro() {
        return getInteger(getValorxmetroAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>valorxmetro</code> attribute value.
     *
     * @param val the new value
     *
     * @see #getValorxmetro
     * @see #removeValorxmetro
     */
    public final void setValorxmetro(int val) {
        setInteger(getValorxmetroAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>valorxmetro</code> attribute value. Falls back
     * to the default value is there is one. If the attribute has no default
     * value, it must be set to a new value before commit.
     *
     * @see #getValorxmetro
     * @see #setValorxmetro
     */
    public final void removeValorxmetro() {
        removeValue(getValorxmetroAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     *
     * @return true if null value
     *
     * @see #getValorxmetro
     * @see #setValorxmetro
     */
    public final boolean isValorxmetroNull() {
        return isNull(getValorxmetroAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     *
     * @return true if default value
     *
     * @see #getValorxmetro
     * @see #setValorxmetro
     */
    public final boolean isValorxmetroDefaultValue() {
        return isDefaultValue(getValorxmetroAttribute(getMtDatabase()));
    }


    /* Attribute 'indicerevalorizacion' */
    /**
     * Attribute <code>indicerevalorizacion</code> cache ID
     */
    private static int indicerevalorizacionCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("indicerevalorizacion", CID));

    /**
     * Gets the <code>indicerevalorizacion</code> attribute descriptor. This
     * method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     *
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getIndicerevalorizacionAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute) db.getCachedObject(indicerevalorizacionCID);
    }

    /**
     * Gets the <code>indicerevalorizacion</code> attribute value.
     *
     * @return the value
     *
     * @see #setIndicerevalorizacion
     * @see #removeIndicerevalorizacion
     */
    public final int getIndicerevalorizacion() {
        return getInteger(getIndicerevalorizacionAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>indicerevalorizacion</code> attribute value.
     *
     * @param val the new value
     *
     * @see #getIndicerevalorizacion
     * @see #removeIndicerevalorizacion
     */
    public final void setIndicerevalorizacion(int val) {
        setInteger(getIndicerevalorizacionAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>indicerevalorizacion</code> attribute value.
     * Falls back to the default value is there is one. If the attribute has no
     * default value, it must be set to a new value before commit.
     *
     * @see #getIndicerevalorizacion
     * @see #setIndicerevalorizacion
     */
    public final void removeIndicerevalorizacion() {
        removeValue(getIndicerevalorizacionAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     *
     * @return true if null value
     *
     * @see #getIndicerevalorizacion
     * @see #setIndicerevalorizacion
     */
    public final boolean isIndicerevalorizacionNull() {
        return isNull(getIndicerevalorizacionAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     *
     * @return true if default value
     *
     * @see #getIndicerevalorizacion
     * @see #setIndicerevalorizacion
     */
    public final boolean isIndicerevalorizacionDefaultValue() {
        return isDefaultValue(getIndicerevalorizacionAttribute(getMtDatabase()));
    }


    /*
     * Relationship access methods
     */

 /* Relationship 'estaen' */
    /**
     * Relationship <code>estaen</code> cache ID
     */
    private static int estaenCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtRelationship.Loader("estaen", CID));

    /**
     * Gets the <code>estaen</code> relationship descriptor. This method
     * supports advanced MATISSE programming techniques such as dynamically
     * modifying the schema.
     *
     * @param db a database
     * @return a relationship descriptor object
     */
    public static com.matisse.reflect.MtRelationship getEstaenRelationship(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtRelationship) db.getCachedObject(estaenCID);
    }

    /**
     * Gets the <code>estaen</code> relationship's successors.
     *
     * @return an array of objects
     *
     * @see #getEstaenSize
     * @see #estaenIterator
     * @see #setEstaen
     * @see #removeEstaen
     */
    public final inmobiliaria.Vivienda[] getEstaen() {
        return (inmobiliaria.Vivienda[]) getSuccessors(getEstaenRelationship(getMtDatabase()), inmobiliaria.Vivienda.class);
    }

    /**
     * Counts the <code>estaen</code> relationship's successors.
     *
     * @return the number of successors
     *
     * @see #getEstaen
     * @see #estaenIterator
     * @see #setEstaen
     * @see #removeEstaen
     */
    public final int getEstaenSize() {
        return getSuccessorSize(getEstaenRelationship(getMtDatabase()));
    }

    /**
     * Opens an iterator on the <code>estaen</code> relationship's successors.
     *
     * @param <E> a MtObject class * @return an object iterator
     *
     * @see #getEstaen
     * @see #getEstaenSize
     * @see #setEstaen
     * @see #removeEstaen
     */
    public final <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> estaenIterator() {
        return this.<E>successorIterator(getEstaenRelationship(getMtDatabase()), inmobiliaria.Vivienda.class);
    }

    /**
     * Sets the <code>estaen</code> relationship's successors.
     *
     * @param succs an array of objects
     *
     * @see #getEstaen
     * @see #getEstaenSize
     * @see #estaenIterator
     * @see #removeEstaen
     */
    public final void setEstaen(inmobiliaria.Vivienda[] succs) {
        setSuccessors(getEstaenRelationship(getMtDatabase()), succs);
    }

    /**
     * Inserts one object at the beginning of the existing <code>estaen</code>
     * successors list.
     *
     * @param succ the object to add
     *
     * @see #getEstaen
     * @see #getEstaenSize
     * @see #estaenIterator
     * @see #setEstaen
     * @see #removeEstaen
     */
    public final void prependEstaen(inmobiliaria.Vivienda succ) {
        prependSuccessor(getEstaenRelationship(getMtDatabase()), succ);
    }

    /**
     * Adds one object to the end of the existing <code>estaen</code> successors
     * list.
     *
     * @param succ the object to add
     *
     * @see #getEstaen
     * @see #setEstaen
     * @see #removeEstaen
     * @see #getEstaenSize
     * @see #estaenIterator
     */
    public final void appendEstaen(inmobiliaria.Vivienda succ) {
        appendSuccessor(getEstaenRelationship(getMtDatabase()), succ);
    }

    /**
     * Adds multiple objects to the end of the existing <code>estaen</code>
     * successors list.
     *
     * @param succs an array of objects to add
     *
     * @see #getEstaen
     * @see #setEstaen
     * @see #removeEstaen
     * @see #getEstaenSize
     * @see #estaenIterator
     */
    public final void appendEstaen(inmobiliaria.Vivienda[] succs) {
        addSuccessors(getEstaenRelationship(getMtDatabase()), succs);
    }

    /**
     * Removes objects from the <code>estaen</code> successors list.
     *
     * @param succs an array of objects to remove
     *
     * @see #getEstaen
     * @see #setEstaen
     * @see #getEstaenSize
     * @see #estaenIterator
     */
    public void removeEstaen(inmobiliaria.Vivienda[] succs) {
        removeSuccessors(getEstaenRelationship(getMtDatabase()), succs);
    }

    /**
     * Removes one object from the <code>estaen</code> successors list.
     *
     * @param succ the object to remove
     *
     * @see #getEstaen
     * @see #setEstaen
     * @see #getEstaenSize
     * @see #estaenIterator
     */
    public void removeEstaen(inmobiliaria.Vivienda succ) {
        removeSuccessor(getEstaenRelationship(getMtDatabase()), succ);
    }

    /**
     * Removes all <code>estaen</code> successors. When the minimum cardinality
     * is 1, a new successor must be set before commit.
     */
    public final void clearEstaen() {
        clearSuccessors(getEstaenRelationship(getMtDatabase()));
    }


    /*
     * SQL Method access methods
     */
    /**
     * SQL Method call.
     *
     * @return the SQL Method return value
     */
    public Float calcularMediaPorZona()
            throws java.sql.SQLException {
        float total = 0f;
        Vivienda[] vivs = getEstaen();
        float suma = 0f;
        for (Vivienda v : vivs) {
            suma = suma + v.calcularPrecio();
        }
        total = suma / vivs.length;
        return total;
    }

    // END of Matisse SDL Generated Code

    /*
     * You may add your own code here...
     */
    /**
     * Default constructor provided as an example. You may delete this
     * constructor or modify it to suit your needs. If you modify it, please
     * revise this comment accordingly.
     *
     * @param db a database
     */
    public Zona(com.matisse.MtDatabase db) {
        super(getClass(db));
    }

    /**
     * Example of <code>toString</code> method. You may delete this method or
     * modify it to suit your needs. If you modify it, please revise this
     * comment accordingly.
     *
     * @return a string
     */
    public java.lang.String toString() {
        return super.toString() + "[Zona]";
    }
}
