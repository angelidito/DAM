/*
 * Zona.java
 *
 * Generated with Matisse Schema Definition Language 9.1.12
 * Generation date: Wed Feb 16 19:43:42 2022
 */

// Note: the package and extends declarations are generated by mt_sdl, do not modify them

package inmoriliaria;

import com.matisse.reflect.*;

/**
 * <code>Zona</code> is a schema class generated by <code>mt_sdl</code>.
 * Any user-written classes will be found at the end of the file, after
 * the '// END of Matisse SDL Generated Code' comment.
 * Attribute types, default values, and relationship minimum and maximum
 * cardinality are stored in the database itself, not in this source code.
 * For more information, see <i>Getting Started with MATISSE</i>.
 */
public class Zona extends com.matisse.reflect.MtObject {

    // BEGIN Matisse SDL Generated Code
    // DO NOT MODIFY UNTIL THE 'END of Matisse SDL Generated Code' MARK BELOW
    /*
     * Generated with Matisse Schema Definition Language 9.1.12
     * Generation Date: Wed Feb 16 19:43:42 2022
     */

    /*
     * Class variables and methods
     */

    /** Class <code>Zona</code> cache ID */
    private static int CID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtClass.Loader("inmoriliaria.Zona"));

    /**
     * Gets the <code>Zona</code> class descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a class descriptor
     */
    public static com.matisse.reflect.MtClass getClass(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtClass)db.getCachedObject(CID);
    }

    /**
     * Factory constructor. This constructor is called by <code>MtObjectFactory</code>.
     * It is public for technical reasons but is not intended to be called
     * directly by user methods.
     * @param db a database
     * @param mtOid an existing object ID in the database
     */
    public Zona(com.matisse.MtDatabase db, int mtOid)  {
        super(db, mtOid);
    }

    /**
     * Cascaded constructor, used by subclasses to create a new object in the database.
     * It is protected for technical reasons but is not intended to be called
     * directly by user methods.
     * @param mtCls a class descriptor (the class to instantiate)
     */
    protected Zona(com.matisse.reflect.MtClass mtCls)  {
        super(mtCls);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>instanceIterator(Zona.class);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>instanceIterator(numObjPerBuffer, Zona.class);
    }

    /**
     * Counts the number of instances of this class (and its subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getInstanceNumber();
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>ownInstanceIterator(Zona.class);
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>ownInstanceIterator(numObjPerBuffer, Zona.class);
    }

    /**
     * Counts the number of own instances of this class (excluding subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getOwnInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getOwnInstanceNumber();
    }

    /*
     * Attribute access methods
     */

    /* Attribute 'idZona' */

    /** Attribute <code>idZona</code> cache ID */
    private static int idZonaCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("idZona",CID));

    /**
     * Gets the <code>idZona</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getIdZonaAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(idZonaCID);
    }


    /**
     * Gets the <code>idZona</code> attribute value.
     * @return the value
     *
     * @see #setIdZona
     * @see #removeIdZona
     */
    public final int getIdZona() {
        return getInteger(getIdZonaAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>idZona</code> attribute value.
     * @param val the new value
     *
     * @see #getIdZona
     * @see #removeIdZona
     */
    public final void setIdZona(int val) {
        setInteger(getIdZonaAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>idZona</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getIdZona
     * @see #setIdZona
     */
    public final void removeIdZona() {
        removeValue(getIdZonaAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getIdZona
     * @see #setIdZona
     */
    public final boolean isIdZonaNull() {
        return isNull(getIdZonaAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getIdZona
     * @see #setIdZona
     */
    public final boolean isIdZonaDefaultValue() {
        return isDefaultValue(getIdZonaAttribute(getMtDatabase()));
    }


    /* Attribute 'nombreZona' */

    /** Attribute <code>nombreZona</code> cache ID */
    private static int nombreZonaCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("nombreZona",CID));

    /**
     * Gets the <code>nombreZona</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getNombreZonaAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(nombreZonaCID);
    }


    /**
     * Gets the <code>nombreZona</code> attribute value.
     * @return the value
     *
     * @see #setNombreZona
     * @see #removeNombreZona
     */
    public final String getNombreZona() {
        return getString(getNombreZonaAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>nombreZona</code> attribute value.
     * @param val the new value
     *
     * @see #getNombreZona
     * @see #removeNombreZona
     */
    public final void setNombreZona(String val) {
        setString(getNombreZonaAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>nombreZona</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getNombreZona
     * @see #setNombreZona
     */
    public final void removeNombreZona() {
        removeValue(getNombreZonaAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getNombreZona
     * @see #setNombreZona
     */
    public final boolean isNombreZonaNull() {
        return isNull(getNombreZonaAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getNombreZona
     * @see #setNombreZona
     */
    public final boolean isNombreZonaDefaultValue() {
        return isDefaultValue(getNombreZonaAttribute(getMtDatabase()));
    }


    /* Attribute 'valorMetroZona' */

    /** Attribute <code>valorMetroZona</code> cache ID */
    private static int valorMetroZonaCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("valorMetroZona",CID));

    /**
     * Gets the <code>valorMetroZona</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getValorMetroZonaAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(valorMetroZonaCID);
    }


    /**
     * Gets the <code>valorMetroZona</code> attribute value.
     * @return the value
     *
     * @see #setValorMetroZona
     * @see #removeValorMetroZona
     */
    public final int getValorMetroZona() {
        return getInteger(getValorMetroZonaAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>valorMetroZona</code> attribute value.
     * @param val the new value
     *
     * @see #getValorMetroZona
     * @see #removeValorMetroZona
     */
    public final void setValorMetroZona(int val) {
        setInteger(getValorMetroZonaAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>valorMetroZona</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getValorMetroZona
     * @see #setValorMetroZona
     */
    public final void removeValorMetroZona() {
        removeValue(getValorMetroZonaAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getValorMetroZona
     * @see #setValorMetroZona
     */
    public final boolean isValorMetroZonaNull() {
        return isNull(getValorMetroZonaAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getValorMetroZona
     * @see #setValorMetroZona
     */
    public final boolean isValorMetroZonaDefaultValue() {
        return isDefaultValue(getValorMetroZonaAttribute(getMtDatabase()));
    }


    /* Attribute 'indiceRevalorizacion' */

    /** Attribute <code>indiceRevalorizacion</code> cache ID */
    private static int indiceRevalorizacionCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("indiceRevalorizacion",CID));

    /**
     * Gets the <code>indiceRevalorizacion</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getIndiceRevalorizacionAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(indiceRevalorizacionCID);
    }


    /**
     * Gets the <code>indiceRevalorizacion</code> attribute value.
     * @return the value
     *
     * @see #setIndiceRevalorizacion
     * @see #removeIndiceRevalorizacion
     */
    public final int getIndiceRevalorizacion() {
        return getInteger(getIndiceRevalorizacionAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>indiceRevalorizacion</code> attribute value.
     * @param val the new value
     *
     * @see #getIndiceRevalorizacion
     * @see #removeIndiceRevalorizacion
     */
    public final void setIndiceRevalorizacion(int val) {
        setInteger(getIndiceRevalorizacionAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>indiceRevalorizacion</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getIndiceRevalorizacion
     * @see #setIndiceRevalorizacion
     */
    public final void removeIndiceRevalorizacion() {
        removeValue(getIndiceRevalorizacionAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getIndiceRevalorizacion
     * @see #setIndiceRevalorizacion
     */
    public final boolean isIndiceRevalorizacionNull() {
        return isNull(getIndiceRevalorizacionAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getIndiceRevalorizacion
     * @see #setIndiceRevalorizacion
     */
    public final boolean isIndiceRevalorizacionDefaultValue() {
        return isDefaultValue(getIndiceRevalorizacionAttribute(getMtDatabase()));
    }


    /*
     * Relationship access methods
     */

    /* Relationship 'contiene' */

    /** Relationship <code>contiene</code> cache ID */
    private static int contieneCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtRelationship.Loader("contiene",CID));

    /**
     * Gets the <code>contiene</code> relationship descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a relationship descriptor object
     */
    public static com.matisse.reflect.MtRelationship getContieneRelationship(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtRelationship)db.getCachedObject(contieneCID);
    }

    /**
     * Gets the <code>contiene</code> relationship's successors.
     * @return an array of objects
     *
     * @see #getContieneSize
     * @see #contieneIterator
     * @see #setContiene
     * @see #removeContiene
     */
    public final inmoriliaria.Vivienda[] getContiene() {
        return (inmoriliaria.Vivienda[])getSuccessors(getContieneRelationship(getMtDatabase()), inmoriliaria.Vivienda.class);
    }

    /**
     * Counts the <code>contiene</code> relationship's successors.
     * @return the number of successors
     *
     * @see #getContiene
     * @see #contieneIterator
     * @see #setContiene
     * @see #removeContiene
     */
    public final int getContieneSize() {
        return getSuccessorSize(getContieneRelationship(getMtDatabase()));
    }

    /**
     * Opens an iterator on the <code>contiene</code> relationship's successors.
     * @param <E> a MtObject class     * @return an object iterator
     *
     * @see #getContiene
     * @see #getContieneSize
     * @see #setContiene
     * @see #removeContiene
     */
    public final <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> contieneIterator() {
        return this.<E>successorIterator(getContieneRelationship(getMtDatabase()), inmoriliaria.Vivienda.class);
    }

    /**
     * Sets the <code>contiene</code> relationship's successors.
     * @param succs an array of objects
     *
     * @see #getContiene
     * @see #getContieneSize
     * @see #contieneIterator
     * @see #removeContiene
     */
    public final void setContiene(inmoriliaria.Vivienda[] succs) {
        setSuccessors(getContieneRelationship(getMtDatabase()), succs);
    }

    /**
     * Inserts one object at the beginning of the existing <code>contiene</code> successors list.
     * @param succ the object to add
     *
     * @see #getContiene
     * @see #getContieneSize
     * @see #contieneIterator
     * @see #setContiene
     * @see #removeContiene
     */
    public final void prependContiene(inmoriliaria.Vivienda succ) {
        prependSuccessor(getContieneRelationship(getMtDatabase()), succ);
    }

    /**
     * Adds one object to the end of the existing <code>contiene</code> successors list.
     * @param succ the object to add
     *
     * @see #getContiene
     * @see #setContiene
     * @see #removeContiene
     * @see #getContieneSize
     * @see #contieneIterator
     */
    public final void appendContiene(inmoriliaria.Vivienda succ) {
        appendSuccessor(getContieneRelationship(getMtDatabase()), succ);
    }
    /** Adds multiple objects to the end of the existing <code>contiene</code> successors list.
     * @param succs an array of objects to add
     *
     * @see #getContiene
     * @see #setContiene
     * @see #removeContiene
     * @see #getContieneSize
     * @see #contieneIterator
     */
    public final void appendContiene(inmoriliaria.Vivienda[] succs) {
        addSuccessors(getContieneRelationship(getMtDatabase()), succs);
    }

    /**
     * Removes objects from the <code>contiene</code> successors list.
     * @param succs an array of objects to remove
     *
     * @see #getContiene
     * @see #setContiene
     * @see #getContieneSize
     * @see #contieneIterator
     */
    public void removeContiene(inmoriliaria.Vivienda[] succs) {
        removeSuccessors(getContieneRelationship(getMtDatabase()), succs);
    }

    /**
     * Removes one object from the <code>contiene</code> successors list.
     * @param succ the object to remove
     *
     * @see #getContiene
     * @see #setContiene
     * @see #getContieneSize
     * @see #contieneIterator
     */
    public void removeContiene(inmoriliaria.Vivienda succ) {
        removeSuccessor(getContieneRelationship(getMtDatabase()), succ);
    }

    /**
     * Removes all <code>contiene</code> successors.  When the minimum cardinality
     * is 1, a new successor must be set before commit.
     */
    public final void clearContiene() {
        clearSuccessors(getContieneRelationship(getMtDatabase()));
    }


    // END of Matisse SDL Generated Code

    /*
     * You may add your own code here...
     */

    /**
     * Default constructor provided as an example.
     * You may delete this constructor or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @param db a database
     */
    public Zona(com.matisse.MtDatabase db) {
        super(getClass(db));
    }

    /**
     * Example of <code>toString</code> method.
     * You may delete this method or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @return a string
     */
    public java.lang.String toString() {
        return super.toString() + "[Zona]";
    }
}
