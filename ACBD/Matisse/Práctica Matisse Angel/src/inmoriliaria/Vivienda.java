/*
 * Vivienda.java
 *
 * Generated with Matisse Schema Definition Language 9.1.12
 * Generation date: Wed Feb 16 19:43:42 2022
 */

// Note: the package and extends declarations are generated by mt_sdl, do not modify them

package inmoriliaria;

import com.matisse.reflect.*;

/**
 * <code>Vivienda</code> is a schema class generated by <code>mt_sdl</code>.
 * Any user-written classes will be found at the end of the file, after
 * the '// END of Matisse SDL Generated Code' comment.
 * Attribute types, default values, and relationship minimum and maximum
 * cardinality are stored in the database itself, not in this source code.
 * For more information, see <i>Getting Started with MATISSE</i>.
 */
public class Vivienda extends com.matisse.reflect.MtObject {

    // BEGIN Matisse SDL Generated Code
    // DO NOT MODIFY UNTIL THE 'END of Matisse SDL Generated Code' MARK BELOW
    /*
     * Generated with Matisse Schema Definition Language 9.1.12
     * Generation Date: Wed Feb 16 19:43:42 2022
     */

    /*
     * Class variables and methods
     */

    /** Class <code>Vivienda</code> cache ID */
    private static int CID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtClass.Loader("inmoriliaria.Vivienda"));

    /**
     * Gets the <code>Vivienda</code> class descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a class descriptor
     */
    public static com.matisse.reflect.MtClass getClass(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtClass)db.getCachedObject(CID);
    }

    /**
     * Factory constructor. This constructor is called by <code>MtObjectFactory</code>.
     * It is public for technical reasons but is not intended to be called
     * directly by user methods.
     * @param db a database
     * @param mtOid an existing object ID in the database
     */
    public Vivienda(com.matisse.MtDatabase db, int mtOid)  {
        super(db, mtOid);
    }

    /**
     * Cascaded constructor, used by subclasses to create a new object in the database.
     * It is protected for technical reasons but is not intended to be called
     * directly by user methods.
     * @param mtCls a class descriptor (the class to instantiate)
     */
    protected Vivienda(com.matisse.reflect.MtClass mtCls)  {
        super(mtCls);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>instanceIterator(Vivienda.class);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>instanceIterator(numObjPerBuffer, Vivienda.class);
    }

    /**
     * Counts the number of instances of this class (and its subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getInstanceNumber();
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>ownInstanceIterator(Vivienda.class);
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>ownInstanceIterator(numObjPerBuffer, Vivienda.class);
    }

    /**
     * Counts the number of own instances of this class (excluding subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getOwnInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getOwnInstanceNumber();
    }

    /*
     * Attribute access methods
     */

    /* Attribute 'idVivienda' */

    /** Attribute <code>idVivienda</code> cache ID */
    private static int idViviendaCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("idVivienda",CID));

    /**
     * Gets the <code>idVivienda</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getIdViviendaAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(idViviendaCID);
    }


    /**
     * Gets the <code>idVivienda</code> attribute value.
     * @return the value
     *
     * @see #setIdVivienda
     * @see #removeIdVivienda
     */
    public final int getIdVivienda() {
        return getInteger(getIdViviendaAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>idVivienda</code> attribute value.
     * @param val the new value
     *
     * @see #getIdVivienda
     * @see #removeIdVivienda
     */
    public final void setIdVivienda(int val) {
        setInteger(getIdViviendaAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>idVivienda</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getIdVivienda
     * @see #setIdVivienda
     */
    public final void removeIdVivienda() {
        removeValue(getIdViviendaAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getIdVivienda
     * @see #setIdVivienda
     */
    public final boolean isIdViviendaNull() {
        return isNull(getIdViviendaAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getIdVivienda
     * @see #setIdVivienda
     */
    public final boolean isIdViviendaDefaultValue() {
        return isDefaultValue(getIdViviendaAttribute(getMtDatabase()));
    }


    /* Attribute 'nombre' */

    /** Attribute <code>nombre</code> cache ID */
    private static int nombreCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("nombre",CID));

    /**
     * Gets the <code>nombre</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getNombreAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(nombreCID);
    }


    /**
     * Gets the <code>nombre</code> attribute value.
     * @return the value
     *
     * @see #setNombre
     * @see #removeNombre
     */
    public final String getNombre() {
        return getString(getNombreAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>nombre</code> attribute value.
     * @param val the new value
     *
     * @see #getNombre
     * @see #removeNombre
     */
    public final void setNombre(String val) {
        setString(getNombreAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>nombre</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getNombre
     * @see #setNombre
     */
    public final void removeNombre() {
        removeValue(getNombreAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getNombre
     * @see #setNombre
     */
    public final boolean isNombreNull() {
        return isNull(getNombreAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getNombre
     * @see #setNombre
     */
    public final boolean isNombreDefaultValue() {
        return isDefaultValue(getNombreAttribute(getMtDatabase()));
    }


    /* Attribute 'calle' */

    /** Attribute <code>calle</code> cache ID */
    private static int calleCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("calle",CID));

    /**
     * Gets the <code>calle</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getCalleAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(calleCID);
    }


    /**
     * Gets the <code>calle</code> attribute value.
     * @return the value
     *
     * @see #setCalle
     * @see #removeCalle
     */
    public final String getCalle() {
        return getString(getCalleAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>calle</code> attribute value.
     * @param val the new value
     *
     * @see #getCalle
     * @see #removeCalle
     */
    public final void setCalle(String val) {
        setString(getCalleAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>calle</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getCalle
     * @see #setCalle
     */
    public final void removeCalle() {
        removeValue(getCalleAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getCalle
     * @see #setCalle
     */
    public final boolean isCalleNull() {
        return isNull(getCalleAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getCalle
     * @see #setCalle
     */
    public final boolean isCalleDefaultValue() {
        return isDefaultValue(getCalleAttribute(getMtDatabase()));
    }


    /* Attribute 'piso' */

    /** Attribute <code>piso</code> cache ID */
    private static int pisoCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("piso",CID));

    /**
     * Gets the <code>piso</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getPisoAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(pisoCID);
    }


    /**
     * Gets the <code>piso</code> attribute value.
     * @return the value
     *
     * @see #setPiso
     * @see #removePiso
     */
    public final int getPiso() {
        return getInteger(getPisoAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>piso</code> attribute value.
     * @param val the new value
     *
     * @see #getPiso
     * @see #removePiso
     */
    public final void setPiso(int val) {
        setInteger(getPisoAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>piso</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getPiso
     * @see #setPiso
     */
    public final void removePiso() {
        removeValue(getPisoAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getPiso
     * @see #setPiso
     */
    public final boolean isPisoNull() {
        return isNull(getPisoAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getPiso
     * @see #setPiso
     */
    public final boolean isPisoDefaultValue() {
        return isDefaultValue(getPisoAttribute(getMtDatabase()));
    }


    /* Attribute 'letra' */

    /** Attribute <code>letra</code> cache ID */
    private static int letraCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("letra",CID));

    /**
     * Gets the <code>letra</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getLetraAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(letraCID);
    }


    /**
     * Gets the <code>letra</code> attribute value.
     * @return the value
     *
     * @see #setLetra
     * @see #removeLetra
     */
    public final String getLetra() {
        return getString(getLetraAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>letra</code> attribute value.
     * @param val the new value
     *
     * @see #getLetra
     * @see #removeLetra
     */
    public final void setLetra(String val) {
        setString(getLetraAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>letra</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getLetra
     * @see #setLetra
     */
    public final void removeLetra() {
        removeValue(getLetraAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getLetra
     * @see #setLetra
     */
    public final boolean isLetraNull() {
        return isNull(getLetraAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getLetra
     * @see #setLetra
     */
    public final boolean isLetraDefaultValue() {
        return isDefaultValue(getLetraAttribute(getMtDatabase()));
    }


    /*
     * Relationship access methods
     */

    /* Relationship 'estaEn' */

    /** Relationship <code>estaEn</code> cache ID */
    private static int estaEnCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtRelationship.Loader("estaEn",CID));

    /**
     * Gets the <code>estaEn</code> relationship descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a relationship descriptor object
     */
    public static com.matisse.reflect.MtRelationship getEstaEnRelationship(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtRelationship)db.getCachedObject(estaEnCID);
    }

    /**
     * Gets the <code>estaEn</code> sucessor object.
     * @return an object 
     *
     * @see #setEstaEn
     * @see #clearEstaEn
     */
    public final inmoriliaria.Zona getEstaEn() {
        return (inmoriliaria.Zona)getSuccessor(getEstaEnRelationship(getMtDatabase()));
    }

    /**
     * Sets the <code>estaEn</code> successor object. It is not necessary to clear the
     * relationship before setting a new successor.
     * @param succ the new successor object
     *
     * @see #getEstaEn
     * @see #clearEstaEn
     */
    public final void setEstaEn(inmoriliaria.Zona succ) {
        setSuccessor(getEstaEnRelationship(getMtDatabase()), succ);
    }

    /**
     * Removes all <code>estaEn</code> successors.  When the minimum cardinality
     * is 1, a new successor must be set before commit.
     */
    public final void clearEstaEn() {
        clearSuccessors(getEstaEnRelationship(getMtDatabase()));
    }


    /* Relationship 'posiblePropietario' */

    /** Relationship <code>posiblePropietario</code> cache ID */
    private static int posiblePropietarioCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtRelationship.Loader("posiblePropietario",CID));

    /**
     * Gets the <code>posiblePropietario</code> relationship descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a relationship descriptor object
     */
    public static com.matisse.reflect.MtRelationship getPosiblePropietarioRelationship(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtRelationship)db.getCachedObject(posiblePropietarioCID);
    }

    /**
     * Gets the <code>posiblePropietario</code> relationship's successors.
     * @return an array of objects
     *
     * @see #getPosiblePropietarioSize
     * @see #posiblePropietarioIterator
     * @see #setPosiblePropietario
     * @see #removePosiblePropietario
     */
    public final inmoriliaria.Cliente[] getPosiblePropietario() {
        return (inmoriliaria.Cliente[])getSuccessors(getPosiblePropietarioRelationship(getMtDatabase()), inmoriliaria.Cliente.class);
    }

    /**
     * Counts the <code>posiblePropietario</code> relationship's successors.
     * @return the number of successors
     *
     * @see #getPosiblePropietario
     * @see #posiblePropietarioIterator
     * @see #setPosiblePropietario
     * @see #removePosiblePropietario
     */
    public final int getPosiblePropietarioSize() {
        return getSuccessorSize(getPosiblePropietarioRelationship(getMtDatabase()));
    }

    /**
     * Opens an iterator on the <code>posiblePropietario</code> relationship's successors.
     * @param <E> a MtObject class     * @return an object iterator
     *
     * @see #getPosiblePropietario
     * @see #getPosiblePropietarioSize
     * @see #setPosiblePropietario
     * @see #removePosiblePropietario
     */
    public final <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> posiblePropietarioIterator() {
        return this.<E>successorIterator(getPosiblePropietarioRelationship(getMtDatabase()), inmoriliaria.Cliente.class);
    }

    /**
     * Sets the <code>posiblePropietario</code> relationship's successors.
     * @param succs an array of objects
     *
     * @see #getPosiblePropietario
     * @see #getPosiblePropietarioSize
     * @see #posiblePropietarioIterator
     * @see #removePosiblePropietario
     */
    public final void setPosiblePropietario(inmoriliaria.Cliente[] succs) {
        setSuccessors(getPosiblePropietarioRelationship(getMtDatabase()), succs);
    }

    /**
     * Inserts one object at the beginning of the existing <code>posiblePropietario</code> successors list.
     * @param succ the object to add
     *
     * @see #getPosiblePropietario
     * @see #getPosiblePropietarioSize
     * @see #posiblePropietarioIterator
     * @see #setPosiblePropietario
     * @see #removePosiblePropietario
     */
    public final void prependPosiblePropietario(inmoriliaria.Cliente succ) {
        prependSuccessor(getPosiblePropietarioRelationship(getMtDatabase()), succ);
    }

    /**
     * Adds one object to the end of the existing <code>posiblePropietario</code> successors list.
     * @param succ the object to add
     *
     * @see #getPosiblePropietario
     * @see #setPosiblePropietario
     * @see #removePosiblePropietario
     * @see #getPosiblePropietarioSize
     * @see #posiblePropietarioIterator
     */
    public final void appendPosiblePropietario(inmoriliaria.Cliente succ) {
        appendSuccessor(getPosiblePropietarioRelationship(getMtDatabase()), succ);
    }
    /** Adds multiple objects to the end of the existing <code>posiblePropietario</code> successors list.
     * @param succs an array of objects to add
     *
     * @see #getPosiblePropietario
     * @see #setPosiblePropietario
     * @see #removePosiblePropietario
     * @see #getPosiblePropietarioSize
     * @see #posiblePropietarioIterator
     */
    public final void appendPosiblePropietario(inmoriliaria.Cliente[] succs) {
        addSuccessors(getPosiblePropietarioRelationship(getMtDatabase()), succs);
    }

    /**
     * Removes objects from the <code>posiblePropietario</code> successors list.
     * @param succs an array of objects to remove
     *
     * @see #getPosiblePropietario
     * @see #setPosiblePropietario
     * @see #getPosiblePropietarioSize
     * @see #posiblePropietarioIterator
     */
    public void removePosiblePropietario(inmoriliaria.Cliente[] succs) {
        removeSuccessors(getPosiblePropietarioRelationship(getMtDatabase()), succs);
    }

    /**
     * Removes one object from the <code>posiblePropietario</code> successors list.
     * @param succ the object to remove
     *
     * @see #getPosiblePropietario
     * @see #setPosiblePropietario
     * @see #getPosiblePropietarioSize
     * @see #posiblePropietarioIterator
     */
    public void removePosiblePropietario(inmoriliaria.Cliente succ) {
        removeSuccessor(getPosiblePropietarioRelationship(getMtDatabase()), succ);
    }

    /**
     * Removes all <code>posiblePropietario</code> successors.  When the minimum cardinality
     * is 1, a new successor must be set before commit.
     */
    public final void clearPosiblePropietario() {
        clearSuccessors(getPosiblePropietarioRelationship(getMtDatabase()));
    }


    /* Relationship 'tiene' */

    /** Relationship <code>tiene</code> cache ID */
    private static int tieneCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtRelationship.Loader("tiene",CID));

    /**
     * Gets the <code>tiene</code> relationship descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a relationship descriptor object
     */
    public static com.matisse.reflect.MtRelationship getTieneRelationship(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtRelationship)db.getCachedObject(tieneCID);
    }

    /**
     * Gets the <code>tiene</code> relationship's successors.
     * @return an array of objects
     *
     * @see #getTieneSize
     * @see #tieneIterator
     * @see #setTiene
     * @see #removeTiene
     */
    public final inmoriliaria.Ventana[] getTiene() {
        return (inmoriliaria.Ventana[])getSuccessors(getTieneRelationship(getMtDatabase()), inmoriliaria.Ventana.class);
    }

    /**
     * Counts the <code>tiene</code> relationship's successors.
     * @return the number of successors
     *
     * @see #getTiene
     * @see #tieneIterator
     * @see #setTiene
     * @see #removeTiene
     */
    public final int getTieneSize() {
        return getSuccessorSize(getTieneRelationship(getMtDatabase()));
    }

    /**
     * Opens an iterator on the <code>tiene</code> relationship's successors.
     * @param <E> a MtObject class     * @return an object iterator
     *
     * @see #getTiene
     * @see #getTieneSize
     * @see #setTiene
     * @see #removeTiene
     */
    public final <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> tieneIterator() {
        return this.<E>successorIterator(getTieneRelationship(getMtDatabase()), inmoriliaria.Ventana.class);
    }

    /**
     * Sets the <code>tiene</code> relationship's successors.
     * @param succs an array of objects
     *
     * @see #getTiene
     * @see #getTieneSize
     * @see #tieneIterator
     * @see #removeTiene
     */
    public final void setTiene(inmoriliaria.Ventana[] succs) {
        setSuccessors(getTieneRelationship(getMtDatabase()), succs);
    }

    /**
     * Inserts one object at the beginning of the existing <code>tiene</code> successors list.
     * @param succ the object to add
     *
     * @see #getTiene
     * @see #getTieneSize
     * @see #tieneIterator
     * @see #setTiene
     * @see #removeTiene
     */
    public final void prependTiene(inmoriliaria.Ventana succ) {
        prependSuccessor(getTieneRelationship(getMtDatabase()), succ);
    }

    /**
     * Adds one object to the end of the existing <code>tiene</code> successors list.
     * @param succ the object to add
     *
     * @see #getTiene
     * @see #setTiene
     * @see #removeTiene
     * @see #getTieneSize
     * @see #tieneIterator
     */
    public final void appendTiene(inmoriliaria.Ventana succ) {
        appendSuccessor(getTieneRelationship(getMtDatabase()), succ);
    }
    /** Adds multiple objects to the end of the existing <code>tiene</code> successors list.
     * @param succs an array of objects to add
     *
     * @see #getTiene
     * @see #setTiene
     * @see #removeTiene
     * @see #getTieneSize
     * @see #tieneIterator
     */
    public final void appendTiene(inmoriliaria.Ventana[] succs) {
        addSuccessors(getTieneRelationship(getMtDatabase()), succs);
    }

    /**
     * Removes objects from the <code>tiene</code> successors list.
     * @param succs an array of objects to remove
     *
     * @see #getTiene
     * @see #setTiene
     * @see #getTieneSize
     * @see #tieneIterator
     */
    public void removeTiene(inmoriliaria.Ventana[] succs) {
        removeSuccessors(getTieneRelationship(getMtDatabase()), succs);
    }

    /**
     * Removes one object from the <code>tiene</code> successors list.
     * @param succ the object to remove
     *
     * @see #getTiene
     * @see #setTiene
     * @see #getTieneSize
     * @see #tieneIterator
     */
    public void removeTiene(inmoriliaria.Ventana succ) {
        removeSuccessor(getTieneRelationship(getMtDatabase()), succ);
    }

    /**
     * Removes all <code>tiene</code> successors.  When the minimum cardinality
     * is 1, a new successor must be set before commit.
     */
    public final void clearTiene() {
        clearSuccessors(getTieneRelationship(getMtDatabase()));
    }


    // END of Matisse SDL Generated Code

    /*
     * You may add your own code here...
     */

    /**
     * Default constructor provided as an example.
     * You may delete this constructor or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @param db a database
     */
    public Vivienda(com.matisse.MtDatabase db) {
        super(getClass(db));
    }

    /**
     * Example of <code>toString</code> method.
     * You may delete this method or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @return a string
     */
    public java.lang.String toString() {
        return super.toString() + "[Vivienda]";
    }
}
