/*
 * Ventana.java
 *
 * Generated with Matisse Schema Definition Language 9.1.12
 * Generation date: Thu Feb 24 08:48:06 2022
 */

// Note: the package and extends declarations are generated by mt_sdl, do not modify them

package inmobiliaria;

import com.matisse.reflect.*;

/**
 * <code>Ventana</code> is a schema class generated by <code>mt_sdl</code>.
 * Any user-written classes will be found at the end of the file, after
 * the '// END of Matisse SDL Generated Code' comment.
 * Attribute types, default values, and relationship minimum and maximum
 * cardinality are stored in the database itself, not in this source code.
 * For more information, see <i>Getting Started with MATISSE</i>.
 */
public class Ventana extends com.matisse.reflect.MtObject {

    // BEGIN Matisse SDL Generated Code
    // DO NOT MODIFY UNTIL THE 'END of Matisse SDL Generated Code' MARK BELOW
    /*
     * Generated with Matisse Schema Definition Language 9.1.12
     * Generation Date: Thu Feb 24 08:48:06 2022
     */

    /*
     * Class variables and methods
     */

    /** Class <code>Ventana</code> cache ID */
    private static int CID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtClass.Loader("inmobiliaria.Ventana"));

    /**
     * Gets the <code>Ventana</code> class descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a class descriptor
     */
    public static com.matisse.reflect.MtClass getClass(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtClass)db.getCachedObject(CID);
    }

    /**
     * Factory constructor. This constructor is called by <code>MtObjectFactory</code>.
     * It is public for technical reasons but is not intended to be called
     * directly by user methods.
     * @param db a database
     * @param mtOid an existing object ID in the database
     */
    public Ventana(com.matisse.MtDatabase db, int mtOid)  {
        super(db, mtOid);
    }

    /**
     * Cascaded constructor, used by subclasses to create a new object in the database.
     * It is protected for technical reasons but is not intended to be called
     * directly by user methods.
     * @param mtCls a class descriptor (the class to instantiate)
     */
    protected Ventana(com.matisse.reflect.MtClass mtCls)  {
        super(mtCls);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>instanceIterator(Ventana.class);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>instanceIterator(numObjPerBuffer, Ventana.class);
    }

    /**
     * Counts the number of instances of this class (and its subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getInstanceNumber();
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>ownInstanceIterator(Ventana.class);
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>ownInstanceIterator(numObjPerBuffer, Ventana.class);
    }

    /**
     * Counts the number of own instances of this class (excluding subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getOwnInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getOwnInstanceNumber();
    }

    /*
     * Attribute access methods
     */

    /* Attribute 'id' */

    /** Attribute <code>id</code> cache ID */
    private static int idCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("id",CID));

    /**
     * Gets the <code>id</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getIdAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(idCID);
    }


    /**
     * Gets the <code>id</code> attribute value.
     * @return the value
     *
     * @see #setId
     * @see #removeId
     */
    public final int getId() {
        return getInteger(getIdAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>id</code> attribute value.
     * @param val the new value
     *
     * @see #getId
     * @see #removeId
     */
    public final void setId(int val) {
        setInteger(getIdAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>id</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getId
     * @see #setId
     */
    public final void removeId() {
        removeValue(getIdAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getId
     * @see #setId
     */
    public final boolean isIdNull() {
        return isNull(getIdAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getId
     * @see #setId
     */
    public final boolean isIdDefaultValue() {
        return isDefaultValue(getIdAttribute(getMtDatabase()));
    }


    /* Attribute 'modelo' */

    /** Attribute <code>modelo</code> cache ID */
    private static int modeloCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("modelo",CID));

    /**
     * Gets the <code>modelo</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getModeloAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(modeloCID);
    }


    /**
     * Gets the <code>modelo</code> attribute value.
     * @return the value
     *
     * @see #setModelo
     * @see #removeModelo
     */
    public final String getModelo() {
        return getString(getModeloAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>modelo</code> attribute value.
     * @param val the new value
     *
     * @see #getModelo
     * @see #removeModelo
     */
    public final void setModelo(String val) {
        setString(getModeloAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>modelo</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getModelo
     * @see #setModelo
     */
    public final void removeModelo() {
        removeValue(getModeloAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getModelo
     * @see #setModelo
     */
    public final boolean isModeloNull() {
        return isNull(getModeloAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getModelo
     * @see #setModelo
     */
    public final boolean isModeloDefaultValue() {
        return isDefaultValue(getModeloAttribute(getMtDatabase()));
    }


    /* Attribute 'metros' */

    /** Attribute <code>metros</code> cache ID */
    private static int metrosCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("metros",CID));

    /**
     * Gets the <code>metros</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getMetrosAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(metrosCID);
    }


    /**
     * Gets the <code>metros</code> attribute value.
     * @return the value
     *
     * @see #setMetros
     * @see #removeMetros
     */
    public final int getMetros() {
        return getInteger(getMetrosAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>metros</code> attribute value.
     * @param val the new value
     *
     * @see #getMetros
     * @see #removeMetros
     */
    public final void setMetros(int val) {
        setInteger(getMetrosAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>metros</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getMetros
     * @see #setMetros
     */
    public final void removeMetros() {
        removeValue(getMetrosAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getMetros
     * @see #setMetros
     */
    public final boolean isMetrosNull() {
        return isNull(getMetrosAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getMetros
     * @see #setMetros
     */
    public final boolean isMetrosDefaultValue() {
        return isDefaultValue(getMetrosAttribute(getMtDatabase()));
    }


    /* Attribute 'orientacion' */

    /** Attribute <code>orientacion</code> cache ID */
    private static int orientacionCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("orientacion",CID));

    /**
     * Gets the <code>orientacion</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getOrientacionAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(orientacionCID);
    }


    /**
     * Gets the <code>orientacion</code> attribute value.
     * @return the value
     *
     * @see #setOrientacion
     * @see #removeOrientacion
     */
    public final String getOrientacion() {
        return getString(getOrientacionAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>orientacion</code> attribute value.
     * @param val the new value
     *
     * @see #getOrientacion
     * @see #removeOrientacion
     */
    public final void setOrientacion(String val) {
        setString(getOrientacionAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>orientacion</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getOrientacion
     * @see #setOrientacion
     */
    public final void removeOrientacion() {
        removeValue(getOrientacionAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getOrientacion
     * @see #setOrientacion
     */
    public final boolean isOrientacionNull() {
        return isNull(getOrientacionAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getOrientacion
     * @see #setOrientacion
     */
    public final boolean isOrientacionDefaultValue() {
        return isDefaultValue(getOrientacionAttribute(getMtDatabase()));
    }


    /* Attribute 'climalite' */

    /** Attribute <code>climalite</code> cache ID */
    private static int climaliteCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("climalite",CID));

    /**
     * Gets the <code>climalite</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getClimaliteAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(climaliteCID);
    }


    /**
     * Gets the <code>climalite</code> attribute value.
     * @return the value
     *
     * @see #setClimalite
     * @see #removeClimalite
     */
    public final boolean getClimalite() {
        return getBoolean(getClimaliteAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>climalite</code> attribute value.
     * @param val the new value
     *
     * @see #getClimalite
     * @see #removeClimalite
     */
    public final void setClimalite(boolean val) {
        setBoolean(getClimaliteAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>climalite</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getClimalite
     * @see #setClimalite
     */
    public final void removeClimalite() {
        removeValue(getClimaliteAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getClimalite
     * @see #setClimalite
     */
    public final boolean isClimaliteNull() {
        return isNull(getClimaliteAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getClimalite
     * @see #setClimalite
     */
    public final boolean isClimaliteDefaultValue() {
        return isDefaultValue(getClimaliteAttribute(getMtDatabase()));
    }


    /*
     * Relationship access methods
     */

    /* Relationship 'colocadaEn' */

    /** Relationship <code>colocadaEn</code> cache ID */
    private static int colocadaEnCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtRelationship.Loader("colocadaEn",CID));

    /**
     * Gets the <code>colocadaEn</code> relationship descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a relationship descriptor object
     */
    public static com.matisse.reflect.MtRelationship getColocadaEnRelationship(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtRelationship)db.getCachedObject(colocadaEnCID);
    }

    /**
     * Gets the <code>colocadaEn</code> relationship's successors.
     * @return an array of objects
     *
     * @see #getColocadaEnSize
     * @see #colocadaEnIterator
     * @see #setColocadaEn
     * @see #removeColocadaEn
     */
    public final inmobiliaria.Vivienda[] getColocadaEn() {
        return (inmobiliaria.Vivienda[])getSuccessors(getColocadaEnRelationship(getMtDatabase()), inmobiliaria.Vivienda.class);
    }

    /**
     * Counts the <code>colocadaEn</code> relationship's successors.
     * @return the number of successors
     *
     * @see #getColocadaEn
     * @see #colocadaEnIterator
     * @see #setColocadaEn
     * @see #removeColocadaEn
     */
    public final int getColocadaEnSize() {
        return getSuccessorSize(getColocadaEnRelationship(getMtDatabase()));
    }

    /**
     * Opens an iterator on the <code>colocadaEn</code> relationship's successors.
     * @param <E> a MtObject class     * @return an object iterator
     *
     * @see #getColocadaEn
     * @see #getColocadaEnSize
     * @see #setColocadaEn
     * @see #removeColocadaEn
     */
    public final <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> colocadaEnIterator() {
        return this.<E>successorIterator(getColocadaEnRelationship(getMtDatabase()), inmobiliaria.Vivienda.class);
    }

    /**
     * Sets the <code>colocadaEn</code> relationship's successors.
     * @param succs an array of objects
     *
     * @see #getColocadaEn
     * @see #getColocadaEnSize
     * @see #colocadaEnIterator
     * @see #removeColocadaEn
     */
    public final void setColocadaEn(inmobiliaria.Vivienda[] succs) {
        setSuccessors(getColocadaEnRelationship(getMtDatabase()), succs);
    }

    /**
     * Inserts one object at the beginning of the existing <code>colocadaEn</code> successors list.
     * @param succ the object to add
     *
     * @see #getColocadaEn
     * @see #getColocadaEnSize
     * @see #colocadaEnIterator
     * @see #setColocadaEn
     * @see #removeColocadaEn
     */
    public final void prependColocadaEn(inmobiliaria.Vivienda succ) {
        prependSuccessor(getColocadaEnRelationship(getMtDatabase()), succ);
    }

    /**
     * Adds one object to the end of the existing <code>colocadaEn</code> successors list.
     * @param succ the object to add
     *
     * @see #getColocadaEn
     * @see #setColocadaEn
     * @see #removeColocadaEn
     * @see #getColocadaEnSize
     * @see #colocadaEnIterator
     */
    public final void appendColocadaEn(inmobiliaria.Vivienda succ) {
        appendSuccessor(getColocadaEnRelationship(getMtDatabase()), succ);
    }
    /** Adds multiple objects to the end of the existing <code>colocadaEn</code> successors list.
     * @param succs an array of objects to add
     *
     * @see #getColocadaEn
     * @see #setColocadaEn
     * @see #removeColocadaEn
     * @see #getColocadaEnSize
     * @see #colocadaEnIterator
     */
    public final void appendColocadaEn(inmobiliaria.Vivienda[] succs) {
        addSuccessors(getColocadaEnRelationship(getMtDatabase()), succs);
    }

    /**
     * Removes objects from the <code>colocadaEn</code> successors list.
     * @param succs an array of objects to remove
     *
     * @see #getColocadaEn
     * @see #setColocadaEn
     * @see #getColocadaEnSize
     * @see #colocadaEnIterator
     */
    public void removeColocadaEn(inmobiliaria.Vivienda[] succs) {
        removeSuccessors(getColocadaEnRelationship(getMtDatabase()), succs);
    }

    /**
     * Removes one object from the <code>colocadaEn</code> successors list.
     * @param succ the object to remove
     *
     * @see #getColocadaEn
     * @see #setColocadaEn
     * @see #getColocadaEnSize
     * @see #colocadaEnIterator
     */
    public void removeColocadaEn(inmobiliaria.Vivienda succ) {
        removeSuccessor(getColocadaEnRelationship(getMtDatabase()), succ);
    }

    /**
     * Removes all <code>colocadaEn</code> successors.  When the minimum cardinality
     * is 1, a new successor must be set before commit.
     */
    public final void clearColocadaEn() {
        clearSuccessors(getColocadaEnRelationship(getMtDatabase()));
    }


    // END of Matisse SDL Generated Code

    /*
     * You may add your own code here...
     */

    /**
     * Default constructor provided as an example.
     * You may delete this constructor or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @param db a database
     */
    public Ventana(com.matisse.MtDatabase db) {
        super(getClass(db));
    }

    /**
     * Example of <code>toString</code> method.
     * You may delete this method or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @return a string
     */
    public java.lang.String toString() {
        return super.toString() + "[Ventana]";
    }
}
