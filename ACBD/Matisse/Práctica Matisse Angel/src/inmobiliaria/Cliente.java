/*
 * Cliente.java
 *
 * Generated with Matisse Schema Definition Language 9.1.12
 * Generation date: Thu Feb 24 08:48:06 2022
 */

// Note: the package and extends declarations are generated by mt_sdl, do not modify them

package inmobiliaria;

import com.matisse.reflect.*;

/**
 * <code>Cliente</code> is a schema class generated by <code>mt_sdl</code>.
 * Any user-written classes will be found at the end of the file, after
 * the '// END of Matisse SDL Generated Code' comment.
 * Attribute types, default values, and relationship minimum and maximum
 * cardinality are stored in the database itself, not in this source code.
 * For more information, see <i>Getting Started with MATISSE</i>.
 */
public class Cliente extends com.matisse.reflect.MtObject {
	public Float calcularDescuento(Vivienda vivienda)
			throws java.sql.SQLException {
		float resultado = 0f;
		float total = 0f;
		Vivienda[] vivs = getQuiereComprar();
		switch (vivs.length) {
			case 0:
				break;
			case 1:
				total = 5;
				break;
			case 2:
				total = 8;
				break;
			case 3:
				total = 10;
				break;
			default:
				total = 10 + (vivs.length - 3);
				break;
		}
		resultado = vivienda.calcularPrecioEspecial(total);
		return resultado;
	}
	// BEGIN Matisse SDL Generated Code
	// DO NOT MODIFY UNTIL THE 'END of Matisse SDL Generated Code' MARK BELOW
	/*
	 * Generated with Matisse Schema Definition Language 9.1.12
	 * Generation Date: Thu Feb 24 08:48:06 2022
	 */

	/*
	 * Class variables and methods
	 */

	/** Class <code>Cliente</code> cache ID */
	private static int CID = com.matisse.MtDatabase
			.allocCID(new com.matisse.reflect.MtClass.Loader("inmobiliaria.Cliente"));

	/**
	 * Gets the <code>Cliente</code> class descriptor.
	 * This method supports advanced MATISSE programming techniques such as
	 * dynamically modifying the schema.
	 * 
	 * @param db a database
	 * @return a class descriptor
	 */
	public static com.matisse.reflect.MtClass getClass(com.matisse.MtDatabase db) {
		return (com.matisse.reflect.MtClass) db.getCachedObject(CID);
	}

	/**
	 * Factory constructor. This constructor is called by
	 * <code>MtObjectFactory</code>.
	 * It is public for technical reasons but is not intended to be called
	 * directly by user methods.
	 * 
	 * @param db    a database
	 * @param mtOid an existing object ID in the database
	 */
	public Cliente(com.matisse.MtDatabase db, int mtOid) {
		super(db, mtOid);
	}

	/**
	 * Cascaded constructor, used by subclasses to create a new object in the
	 * database.
	 * It is protected for technical reasons but is not intended to be called
	 * directly by user methods.
	 * 
	 * @param mtCls a class descriptor (the class to instantiate)
	 */
	protected Cliente(com.matisse.reflect.MtClass mtCls) {
		super(mtCls);
	}

	/**
	 * Opens an iterator on all instances of this class (and its subclasses).
	 * 
	 * @param <E> a MtObject class * @param db a database
	 * @return an object iterator
	 */
	public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(
			com.matisse.MtDatabase db) {
		return getClass(db).<E>instanceIterator(Cliente.class);
	}

	/**
	 * Opens an iterator on all instances of this class (and its subclasses).
	 * 
	 * @param <E>             a MtObject class * @param db a database
	 * @param numObjPerBuffer maximum number of objects to fetch from the server at
	 *                        a time
	 * @return an object iterator
	 */
	public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(
			com.matisse.MtDatabase db, int numObjPerBuffer) {
		return getClass(db).<E>instanceIterator(numObjPerBuffer, Cliente.class);
	}

	/**
	 * Counts the number of instances of this class (and its subclasses).
	 * 
	 * @param db a database
	 * @return total number of instances
	 */
	public static long getInstanceNumber(com.matisse.MtDatabase db) {
		return getClass(db).getInstanceNumber();
	}

	/**
	 * Opens an iterator on all own instances of this class (excluding subclasses).
	 * 
	 * @param <E> a MtObject class * @param db a database
	 * @return an object iterator
	 */
	public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(
			com.matisse.MtDatabase db) {
		return getClass(db).<E>ownInstanceIterator(Cliente.class);
	}

	/**
	 * Opens an iterator on all own instances of this class (excluding subclasses).
	 * 
	 * @param <E>             a MtObject class * @param db a database
	 * @param numObjPerBuffer maximum number of objects to fetch from the server at
	 *                        a time
	 * @return an object iterator
	 */
	public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(
			com.matisse.MtDatabase db, int numObjPerBuffer) {
		return getClass(db).<E>ownInstanceIterator(numObjPerBuffer, Cliente.class);
	}

	/**
	 * Counts the number of own instances of this class (excluding subclasses).
	 * 
	 * @param db a database
	 * @return total number of instances
	 */
	public static long getOwnInstanceNumber(com.matisse.MtDatabase db) {
		return getClass(db).getOwnInstanceNumber();
	}

	/*
	 * Attribute access methods
	 */

	/* Attribute 'id' */

	/** Attribute <code>id</code> cache ID */
	private static int idCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("id", CID));

	/**
	 * Gets the <code>id</code> attribute descriptor.
	 * This method supports advanced MATISSE programming techniques such as
	 * dynamically modifying the schema.
	 * 
	 * @param db the database containing the attribute
	 * @return the attribute descriptor object
	 */
	public static com.matisse.reflect.MtAttribute getIdAttribute(com.matisse.MtDatabase db) {
		return (com.matisse.reflect.MtAttribute) db.getCachedObject(idCID);
	}

	/**
	 * Gets the <code>id</code> attribute value.
	 * 
	 * @return the value
	 *
	 * @see #setId
	 * @see #removeId
	 */
	public final int getId() {
		return getInteger(getIdAttribute(getMtDatabase()));
	}

	/**
	 * Sets the <code>id</code> attribute value.
	 * 
	 * @param val the new value
	 *
	 * @see #getId
	 * @see #removeId
	 */
	public final void setId(int val) {
		setInteger(getIdAttribute(getMtDatabase()), val);
	}

	/**
	 * Removes the current <code>id</code> attribute value.
	 * Falls back to the default value is there is one. If the attribute
	 * has no default value, it must be set to a new value before commit.
	 *
	 * @see #getId
	 * @see #setId
	 */
	public final void removeId() {
		removeValue(getIdAttribute(getMtDatabase()));
	}

	/**
	 * Check if nullable attribute value is set to MT_NULL.
	 * 
	 * @return true if null value
	 *
	 * @see #getId
	 * @see #setId
	 */
	public final boolean isIdNull() {
		return isNull(getIdAttribute(getMtDatabase()));
	}

	/**
	 * Check if attribute value is set to its default value.
	 * 
	 * @return true if default value
	 *
	 * @see #getId
	 * @see #setId
	 */
	public final boolean isIdDefaultValue() {
		return isDefaultValue(getIdAttribute(getMtDatabase()));
	}

	/* Attribute 'DNI' */

	/** Attribute <code>DNI</code> cache ID */
	private static int dNICID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("DNI", CID));

	/**
	 * Gets the <code>DNI</code> attribute descriptor.
	 * This method supports advanced MATISSE programming techniques such as
	 * dynamically modifying the schema.
	 * 
	 * @param db the database containing the attribute
	 * @return the attribute descriptor object
	 */
	public static com.matisse.reflect.MtAttribute getDNIAttribute(com.matisse.MtDatabase db) {
		return (com.matisse.reflect.MtAttribute) db.getCachedObject(dNICID);
	}

	/**
	 * Gets the <code>DNI</code> attribute value.
	 * 
	 * @return the value
	 *
	 * @see #setDNI
	 * @see #removeDNI
	 */
	public final String getDNI() {
		return getString(getDNIAttribute(getMtDatabase()));
	}

	/**
	 * Sets the <code>DNI</code> attribute value.
	 * 
	 * @param val the new value
	 *
	 * @see #getDNI
	 * @see #removeDNI
	 */
	public final void setDNI(String val) {
		setString(getDNIAttribute(getMtDatabase()), val);
	}

	/**
	 * Removes the current <code>DNI</code> attribute value.
	 * Falls back to the default value is there is one. If the attribute
	 * has no default value, it must be set to a new value before commit.
	 *
	 * @see #getDNI
	 * @see #setDNI
	 */
	public final void removeDNI() {
		removeValue(getDNIAttribute(getMtDatabase()));
	}

	/**
	 * Check if nullable attribute value is set to MT_NULL.
	 * 
	 * @return true if null value
	 *
	 * @see #getDNI
	 * @see #setDNI
	 */
	public final boolean isDNINull() {
		return isNull(getDNIAttribute(getMtDatabase()));
	}

	/**
	 * Check if attribute value is set to its default value.
	 * 
	 * @return true if default value
	 *
	 * @see #getDNI
	 * @see #setDNI
	 */
	public final boolean isDNIDefaultValue() {
		return isDefaultValue(getDNIAttribute(getMtDatabase()));
	}

	/* Attribute 'nombre' */

	/** Attribute <code>nombre</code> cache ID */
	private static int nombreCID = com.matisse.MtDatabase
			.allocCID(new com.matisse.reflect.MtAttribute.Loader("nombre", CID));

	/**
	 * Gets the <code>nombre</code> attribute descriptor.
	 * This method supports advanced MATISSE programming techniques such as
	 * dynamically modifying the schema.
	 * 
	 * @param db the database containing the attribute
	 * @return the attribute descriptor object
	 */
	public static com.matisse.reflect.MtAttribute getNombreAttribute(com.matisse.MtDatabase db) {
		return (com.matisse.reflect.MtAttribute) db.getCachedObject(nombreCID);
	}

	/**
	 * Gets the <code>nombre</code> attribute value.
	 * 
	 * @return the value
	 *
	 * @see #setNombre
	 * @see #removeNombre
	 */
	public final String getNombre() {
		return getString(getNombreAttribute(getMtDatabase()));
	}

	/**
	 * Sets the <code>nombre</code> attribute value.
	 * 
	 * @param val the new value
	 *
	 * @see #getNombre
	 * @see #removeNombre
	 */
	public final void setNombre(String val) {
		setString(getNombreAttribute(getMtDatabase()), val);
	}

	/**
	 * Removes the current <code>nombre</code> attribute value.
	 * Falls back to the default value is there is one. If the attribute
	 * has no default value, it must be set to a new value before commit.
	 *
	 * @see #getNombre
	 * @see #setNombre
	 */
	public final void removeNombre() {
		removeValue(getNombreAttribute(getMtDatabase()));
	}

	/**
	 * Check if nullable attribute value is set to MT_NULL.
	 * 
	 * @return true if null value
	 *
	 * @see #getNombre
	 * @see #setNombre
	 */
	public final boolean isNombreNull() {
		return isNull(getNombreAttribute(getMtDatabase()));
	}

	/**
	 * Check if attribute value is set to its default value.
	 * 
	 * @return true if default value
	 *
	 * @see #getNombre
	 * @see #setNombre
	 */
	public final boolean isNombreDefaultValue() {
		return isDefaultValue(getNombreAttribute(getMtDatabase()));
	}

	/* Attribute 'apellidos' */

	/** Attribute <code>apellidos</code> cache ID */
	private static int apellidosCID = com.matisse.MtDatabase
			.allocCID(new com.matisse.reflect.MtAttribute.Loader("apellidos", CID));

	/**
	 * Gets the <code>apellidos</code> attribute descriptor.
	 * This method supports advanced MATISSE programming techniques such as
	 * dynamically modifying the schema.
	 * 
	 * @param db the database containing the attribute
	 * @return the attribute descriptor object
	 */
	public static com.matisse.reflect.MtAttribute getApellidosAttribute(com.matisse.MtDatabase db) {
		return (com.matisse.reflect.MtAttribute) db.getCachedObject(apellidosCID);
	}

	/**
	 * Gets the <code>apellidos</code> attribute value.
	 * 
	 * @return the value
	 *
	 * @see #setApellidos
	 * @see #removeApellidos
	 */
	public final String getApellidos() {
		return getString(getApellidosAttribute(getMtDatabase()));
	}

	/**
	 * Sets the <code>apellidos</code> attribute value.
	 * 
	 * @param val the new value
	 *
	 * @see #getApellidos
	 * @see #removeApellidos
	 */
	public final void setApellidos(String val) {
		setString(getApellidosAttribute(getMtDatabase()), val);
	}

	/**
	 * Removes the current <code>apellidos</code> attribute value.
	 * Falls back to the default value is there is one. If the attribute
	 * has no default value, it must be set to a new value before commit.
	 *
	 * @see #getApellidos
	 * @see #setApellidos
	 */
	public final void removeApellidos() {
		removeValue(getApellidosAttribute(getMtDatabase()));
	}

	/**
	 * Check if nullable attribute value is set to MT_NULL.
	 * 
	 * @return true if null value
	 *
	 * @see #getApellidos
	 * @see #setApellidos
	 */
	public final boolean isApellidosNull() {
		return isNull(getApellidosAttribute(getMtDatabase()));
	}

	/**
	 * Check if attribute value is set to its default value.
	 * 
	 * @return true if default value
	 *
	 * @see #getApellidos
	 * @see #setApellidos
	 */
	public final boolean isApellidosDefaultValue() {
		return isDefaultValue(getApellidosAttribute(getMtDatabase()));
	}

	/*
	 * Relationship access methods
	 */

	/* Relationship 'quiereComprar' */

	/** Relationship <code>quiereComprar</code> cache ID */
	private static int quiereComprarCID = com.matisse.MtDatabase
			.allocCID(new com.matisse.reflect.MtRelationship.Loader("quiereComprar", CID));

	/**
	 * Gets the <code>quiereComprar</code> relationship descriptor.
	 * This method supports advanced MATISSE programming techniques such as
	 * dynamically modifying the schema.
	 * 
	 * @param db a database
	 * @return a relationship descriptor object
	 */
	public static com.matisse.reflect.MtRelationship getQuiereComprarRelationship(com.matisse.MtDatabase db) {
		return (com.matisse.reflect.MtRelationship) db.getCachedObject(quiereComprarCID);
	}

	/**
	 * Gets the <code>quiereComprar</code> relationship's successors.
	 * 
	 * @return an array of objects
	 *
	 * @see #getQuiereComprarSize
	 * @see #quiereComprarIterator
	 * @see #setQuiereComprar
	 * @see #removeQuiereComprar
	 */
	public final inmobiliaria.Vivienda[] getQuiereComprar() {
		return (inmobiliaria.Vivienda[]) getSuccessors(getQuiereComprarRelationship(getMtDatabase()),
				inmobiliaria.Vivienda.class);
	}

	/**
	 * Counts the <code>quiereComprar</code> relationship's successors.
	 * 
	 * @return the number of successors
	 *
	 * @see #getQuiereComprar
	 * @see #quiereComprarIterator
	 * @see #setQuiereComprar
	 * @see #removeQuiereComprar
	 */
	public final int getQuiereComprarSize() {
		return getSuccessorSize(getQuiereComprarRelationship(getMtDatabase()));
	}

	/**
	 * Opens an iterator on the <code>quiereComprar</code> relationship's
	 * successors.
	 * 
	 * @param <E> a MtObject class * @return an object iterator
	 *
	 * @see #getQuiereComprar
	 * @see #getQuiereComprarSize
	 * @see #setQuiereComprar
	 * @see #removeQuiereComprar
	 */
	public final <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> quiereComprarIterator() {
		return this.<E>successorIterator(getQuiereComprarRelationship(getMtDatabase()), inmobiliaria.Vivienda.class);
	}

	/**
	 * Sets the <code>quiereComprar</code> relationship's successors.
	 * 
	 * @param succs an array of objects
	 *
	 * @see #getQuiereComprar
	 * @see #getQuiereComprarSize
	 * @see #quiereComprarIterator
	 * @see #removeQuiereComprar
	 */
	public final void setQuiereComprar(inmobiliaria.Vivienda[] succs) {
		setSuccessors(getQuiereComprarRelationship(getMtDatabase()), succs);
	}

	/**
	 * Inserts one object at the beginning of the existing
	 * <code>quiereComprar</code> successors list.
	 * 
	 * @param succ the object to add
	 *
	 * @see #getQuiereComprar
	 * @see #getQuiereComprarSize
	 * @see #quiereComprarIterator
	 * @see #setQuiereComprar
	 * @see #removeQuiereComprar
	 */
	public final void prependQuiereComprar(inmobiliaria.Vivienda succ) {
		prependSuccessor(getQuiereComprarRelationship(getMtDatabase()), succ);
	}

	/**
	 * Adds one object to the end of the existing <code>quiereComprar</code>
	 * successors list.
	 * 
	 * @param succ the object to add
	 *
	 * @see #getQuiereComprar
	 * @see #setQuiereComprar
	 * @see #removeQuiereComprar
	 * @see #getQuiereComprarSize
	 * @see #quiereComprarIterator
	 */
	public final void appendQuiereComprar(inmobiliaria.Vivienda succ) {
		appendSuccessor(getQuiereComprarRelationship(getMtDatabase()), succ);
	}

	/**
	 * Adds multiple objects to the end of the existing <code>quiereComprar</code>
	 * successors list.
	 * 
	 * @param succs an array of objects to add
	 *
	 * @see #getQuiereComprar
	 * @see #setQuiereComprar
	 * @see #removeQuiereComprar
	 * @see #getQuiereComprarSize
	 * @see #quiereComprarIterator
	 */
	public final void appendQuiereComprar(inmobiliaria.Vivienda[] succs) {
		addSuccessors(getQuiereComprarRelationship(getMtDatabase()), succs);
	}

	/**
	 * Removes objects from the <code>quiereComprar</code> successors list.
	 * 
	 * @param succs an array of objects to remove
	 *
	 * @see #getQuiereComprar
	 * @see #setQuiereComprar
	 * @see #getQuiereComprarSize
	 * @see #quiereComprarIterator
	 */
	public void removeQuiereComprar(inmobiliaria.Vivienda[] succs) {
		removeSuccessors(getQuiereComprarRelationship(getMtDatabase()), succs);
	}

	/**
	 * Removes one object from the <code>quiereComprar</code> successors list.
	 * 
	 * @param succ the object to remove
	 *
	 * @see #getQuiereComprar
	 * @see #setQuiereComprar
	 * @see #getQuiereComprarSize
	 * @see #quiereComprarIterator
	 */
	public void removeQuiereComprar(inmobiliaria.Vivienda succ) {
		removeSuccessor(getQuiereComprarRelationship(getMtDatabase()), succ);
	}

	/**
	 * Removes all <code>quiereComprar</code> successors. When the minimum
	 * cardinality
	 * is 1, a new successor must be set before commit.
	 */
	public final void clearQuiereComprar() {
		clearSuccessors(getQuiereComprarRelationship(getMtDatabase()));
	}

	// END of Matisse SDL Generated Code

	/*
	 * You may add your own code here...
	 */

	/**
	 * Default constructor provided as an example.
	 * You may delete this constructor or modify it to suit your needs. If you
	 * modify it, please revise this comment accordingly.
	 * 
	 * @param db a database
	 */
	public Cliente(com.matisse.MtDatabase db) {
		super(getClass(db));
	}

	/**
	 * Example of <code>toString</code> method.
	 * You may delete this method or modify it to suit your needs. If you
	 * modify it, please revise this comment accordingly.
	 * 
	 * @return a string
	 */
	public java.lang.String toString() {
		return super.toString() + "[Cliente]";
	}
}
