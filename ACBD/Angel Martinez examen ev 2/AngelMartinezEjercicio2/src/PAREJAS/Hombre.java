/*
 * Hombre.java
 *
 * Generated with Matisse Schema Definition Language 9.1.12
 * Generation date: Thu Feb 17 11:17:20 2022
 */

// Note: the package and extends declarations are generated by mt_sdl, do not modify them

package PAREJAS;

import com.matisse.reflect.*;

/**
 * <code>Hombre</code> is a schema class generated by <code>mt_sdl</code>.
 * Any user-written classes will be found at the end of the file, after
 * the '// END of Matisse SDL Generated Code' comment.
 * Attribute types, default values, and relationship minimum and maximum
 * cardinality are stored in the database itself, not in this source code.
 * For more information, see <i>Getting Started with MATISSE</i>.
 */
public class Hombre extends com.matisse.reflect.MtObject {

    // BEGIN Matisse SDL Generated Code
    // DO NOT MODIFY UNTIL THE 'END of Matisse SDL Generated Code' MARK BELOW
    /*
     * Generated with Matisse Schema Definition Language 9.1.12
     * Generation Date: Thu Feb 17 11:17:20 2022
     */

    /*
     * Class variables and methods
     */

    /** Class <code>Hombre</code> cache ID */
    private static int CID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtClass.Loader("PAREJAS.Hombre"));

    /**
     * Gets the <code>Hombre</code> class descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a class descriptor
     */
    public static com.matisse.reflect.MtClass getClass(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtClass)db.getCachedObject(CID);
    }

    /**
     * Factory constructor. This constructor is called by <code>MtObjectFactory</code>.
     * It is public for technical reasons but is not intended to be called
     * directly by user methods.
     * @param db a database
     * @param mtOid an existing object ID in the database
     */
    public Hombre(com.matisse.MtDatabase db, int mtOid)  {
        super(db, mtOid);
    }

    /**
     * Cascaded constructor, used by subclasses to create a new object in the database.
     * It is protected for technical reasons but is not intended to be called
     * directly by user methods.
     * @param mtCls a class descriptor (the class to instantiate)
     */
    protected Hombre(com.matisse.reflect.MtClass mtCls)  {
        super(mtCls);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>instanceIterator(Hombre.class);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>instanceIterator(numObjPerBuffer, Hombre.class);
    }

    /**
     * Counts the number of instances of this class (and its subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getInstanceNumber();
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>ownInstanceIterator(Hombre.class);
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>ownInstanceIterator(numObjPerBuffer, Hombre.class);
    }

    /**
     * Counts the number of own instances of this class (excluding subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getOwnInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getOwnInstanceNumber();
    }

    /*
     * Attribute access methods
     */

    /* Attribute 'id_hombre' */

    /** Attribute <code>id_hombre</code> cache ID */
    private static int id_hombreCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("id_hombre",CID));

    /**
     * Gets the <code>id_hombre</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getId_hombreAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(id_hombreCID);
    }


    /**
     * Gets the <code>id_hombre</code> attribute value.
     * @return the value
     *
     * @see #setId_hombre
     * @see #removeId_hombre
     */
    public final int getId_hombre() {
        return getInteger(getId_hombreAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>id_hombre</code> attribute value.
     * @param val the new value
     *
     * @see #getId_hombre
     * @see #removeId_hombre
     */
    public final void setId_hombre(int val) {
        setInteger(getId_hombreAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>id_hombre</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getId_hombre
     * @see #setId_hombre
     */
    public final void removeId_hombre() {
        removeValue(getId_hombreAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getId_hombre
     * @see #setId_hombre
     */
    public final boolean isId_hombreNull() {
        return isNull(getId_hombreAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getId_hombre
     * @see #setId_hombre
     */
    public final boolean isId_hombreDefaultValue() {
        return isDefaultValue(getId_hombreAttribute(getMtDatabase()));
    }


    /* Attribute 'nombre_hombre' */

    /** Attribute <code>nombre_hombre</code> cache ID */
    private static int nombre_hombreCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("nombre_hombre",CID));

    /**
     * Gets the <code>nombre_hombre</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getNombre_hombreAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(nombre_hombreCID);
    }


    /**
     * Gets the <code>nombre_hombre</code> attribute value.
     * @return the value
     *
     * @see #setNombre_hombre
     * @see #removeNombre_hombre
     */
    public final String getNombre_hombre() {
        return getString(getNombre_hombreAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>nombre_hombre</code> attribute value.
     * @param val the new value
     *
     * @see #getNombre_hombre
     * @see #removeNombre_hombre
     */
    public final void setNombre_hombre(String val) {
        setString(getNombre_hombreAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>nombre_hombre</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getNombre_hombre
     * @see #setNombre_hombre
     */
    public final void removeNombre_hombre() {
        removeValue(getNombre_hombreAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getNombre_hombre
     * @see #setNombre_hombre
     */
    public final boolean isNombre_hombreNull() {
        return isNull(getNombre_hombreAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getNombre_hombre
     * @see #setNombre_hombre
     */
    public final boolean isNombre_hombreDefaultValue() {
        return isDefaultValue(getNombre_hombreAttribute(getMtDatabase()));
    }


    /* Attribute 'edad_hombre' */

    /** Attribute <code>edad_hombre</code> cache ID */
    private static int edad_hombreCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("edad_hombre",CID));

    /**
     * Gets the <code>edad_hombre</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getEdad_hombreAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(edad_hombreCID);
    }


    /**
     * Gets the <code>edad_hombre</code> attribute value.
     * @return the value
     *
     * @see #setEdad_hombre
     * @see #removeEdad_hombre
     */
    public final int getEdad_hombre() {
        return getInteger(getEdad_hombreAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>edad_hombre</code> attribute value.
     * @param val the new value
     *
     * @see #getEdad_hombre
     * @see #removeEdad_hombre
     */
    public final void setEdad_hombre(int val) {
        setInteger(getEdad_hombreAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>edad_hombre</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getEdad_hombre
     * @see #setEdad_hombre
     */
    public final void removeEdad_hombre() {
        removeValue(getEdad_hombreAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getEdad_hombre
     * @see #setEdad_hombre
     */
    public final boolean isEdad_hombreNull() {
        return isNull(getEdad_hombreAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getEdad_hombre
     * @see #setEdad_hombre
     */
    public final boolean isEdad_hombreDefaultValue() {
        return isDefaultValue(getEdad_hombreAttribute(getMtDatabase()));
    }


    /* Attribute 'salario' */

    /** Attribute <code>salario</code> cache ID */
    private static int salarioCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("salario",CID));

    /**
     * Gets the <code>salario</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getSalarioAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(salarioCID);
    }


    /**
     * Gets the <code>salario</code> attribute value.
     * @return the value
     *
     * @see #setSalario
     * @see #removeSalario
     */
    public final int getSalario() {
        return getInteger(getSalarioAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>salario</code> attribute value.
     * @param val the new value
     *
     * @see #getSalario
     * @see #removeSalario
     */
    public final void setSalario(int val) {
        setInteger(getSalarioAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>salario</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getSalario
     * @see #setSalario
     */
    public final void removeSalario() {
        removeValue(getSalarioAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getSalario
     * @see #setSalario
     */
    public final boolean isSalarioNull() {
        return isNull(getSalarioAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getSalario
     * @see #setSalario
     */
    public final boolean isSalarioDefaultValue() {
        return isDefaultValue(getSalarioAttribute(getMtDatabase()));
    }


    /* Attribute 'num_pagas' */

    /** Attribute <code>num_pagas</code> cache ID */
    private static int num_pagasCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("num_pagas",CID));

    /**
     * Gets the <code>num_pagas</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getNum_pagasAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(num_pagasCID);
    }


    /**
     * Gets the <code>num_pagas</code> attribute value.
     * @return the value
     *
     * @see #setNum_pagas
     * @see #removeNum_pagas
     */
    public final int getNum_pagas() {
        return getInteger(getNum_pagasAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>num_pagas</code> attribute value.
     * @param val the new value
     *
     * @see #getNum_pagas
     * @see #removeNum_pagas
     */
    public final void setNum_pagas(int val) {
        setInteger(getNum_pagasAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>num_pagas</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getNum_pagas
     * @see #setNum_pagas
     */
    public final void removeNum_pagas() {
        removeValue(getNum_pagasAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getNum_pagas
     * @see #setNum_pagas
     */
    public final boolean isNum_pagasNull() {
        return isNull(getNum_pagasAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getNum_pagas
     * @see #setNum_pagas
     */
    public final boolean isNum_pagasDefaultValue() {
        return isDefaultValue(getNum_pagasAttribute(getMtDatabase()));
    }


    /* Attribute 'retencion' */

    /** Attribute <code>retencion</code> cache ID */
    private static int retencionCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("retencion",CID));

    /**
     * Gets the <code>retencion</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getRetencionAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(retencionCID);
    }


    /**
     * Gets the <code>retencion</code> attribute value.
     * @return the value
     *
     * @see #setRetencion
     * @see #removeRetencion
     */
    public final int getRetencion() {
        return getInteger(getRetencionAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>retencion</code> attribute value.
     * @param val the new value
     *
     * @see #getRetencion
     * @see #removeRetencion
     */
    public final void setRetencion(int val) {
        setInteger(getRetencionAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>retencion</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getRetencion
     * @see #setRetencion
     */
    public final void removeRetencion() {
        removeValue(getRetencionAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getRetencion
     * @see #setRetencion
     */
    public final boolean isRetencionNull() {
        return isNull(getRetencionAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getRetencion
     * @see #setRetencion
     */
    public final boolean isRetencionDefaultValue() {
        return isDefaultValue(getRetencionAttribute(getMtDatabase()));
    }


    /*
     * Relationship access methods
     */

    /* Relationship 'tieneMujer' */

    /** Relationship <code>tieneMujer</code> cache ID */
    private static int tieneMujerCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtRelationship.Loader("tieneMujer",CID));

    /**
     * Gets the <code>tieneMujer</code> relationship descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a relationship descriptor object
     */
    public static com.matisse.reflect.MtRelationship getTieneMujerRelationship(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtRelationship)db.getCachedObject(tieneMujerCID);
    }

    /**
     * Gets the <code>tieneMujer</code> relationship's successors.
     * @return an array of objects
     *
     * @see #getTieneMujerSize
     * @see #tieneMujerIterator
     * @see #setTieneMujer
     * @see #removeTieneMujer
     */
    public final PAREJAS.Mujer[] getTieneMujer() {
        return (PAREJAS.Mujer[]) getSuccessors(getTieneMujerRelationship(getMtDatabase()), PAREJAS.Mujer.class);
    }

    /**
     * Counts the <code>tieneMujer</code> relationship's successors.
     * @return the number of successors
     *
     * @see #getTieneMujer
     * @see #tieneMujerIterator
     * @see #setTieneMujer
     * @see #removeTieneMujer
     */
    public final int getTieneMujerSize() {
        return getSuccessorSize(getTieneMujerRelationship(getMtDatabase()));
    }

    /**
     * Opens an iterator on the <code>tieneMujer</code> relationship's successors.
     * @param <E> a MtObject class     * @return an object iterator
     *
     * @see #getTieneMujer
     * @see #getTieneMujerSize
     * @see #setTieneMujer
     * @see #removeTieneMujer
     */
    public final <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> tieneMujerIterator() {
        return this.<E>successorIterator(getTieneMujerRelationship(getMtDatabase()), PAREJAS.Mujer.class);
    }

    /**
     * Sets the <code>tieneMujer</code> relationship's successors.
     * @param succs an array of objects
     *
     * @see #getTieneMujer
     * @see #getTieneMujerSize
     * @see #tieneMujerIterator
     * @see #removeTieneMujer
     */
    public final void setTieneMujer(PAREJAS.Mujer[] succs) {
        setSuccessors(getTieneMujerRelationship(getMtDatabase()), succs);
    }

    /**
     * Inserts one object at the beginning of the existing <code>tieneMujer</code> successors list.
     * @param succ the object to add
     *
     * @see #getTieneMujer
     * @see #getTieneMujerSize
     * @see #tieneMujerIterator
     * @see #setTieneMujer
     * @see #removeTieneMujer
     */
    public final void prependTieneMujer(PAREJAS.Mujer succ) {
        prependSuccessor(getTieneMujerRelationship(getMtDatabase()), succ);
    }

    /**
     * Adds one object to the end of the existing <code>tieneMujer</code> successors list.
     * @param succ the object to add
     *
     * @see #getTieneMujer
     * @see #setTieneMujer
     * @see #removeTieneMujer
     * @see #getTieneMujerSize
     * @see #tieneMujerIterator
     */
    public final void appendTieneMujer(PAREJAS.Mujer succ) {
        appendSuccessor(getTieneMujerRelationship(getMtDatabase()), succ);
    }
    /** Adds multiple objects to the end of the existing <code>tieneMujer</code> successors list.
     * @param succs an array of objects to add
     *
     * @see #getTieneMujer
     * @see #setTieneMujer
     * @see #removeTieneMujer
     * @see #getTieneMujerSize
     * @see #tieneMujerIterator
     */
    public final void appendTieneMujer(PAREJAS.Mujer[] succs) {
        addSuccessors(getTieneMujerRelationship(getMtDatabase()), succs);
    }

    /**
     * Removes objects from the <code>tieneMujer</code> successors list.
     * @param succs an array of objects to remove
     *
     * @see #getTieneMujer
     * @see #setTieneMujer
     * @see #getTieneMujerSize
     * @see #tieneMujerIterator
     */
    public void removeTieneMujer(PAREJAS.Mujer[] succs) {
        removeSuccessors(getTieneMujerRelationship(getMtDatabase()), succs);
    }

    /**
     * Removes one object from the <code>tieneMujer</code> successors list.
     * @param succ the object to remove
     *
     * @see #getTieneMujer
     * @see #setTieneMujer
     * @see #getTieneMujerSize
     * @see #tieneMujerIterator
     */
    public void removeTieneMujer(PAREJAS.Mujer succ) {
        removeSuccessor(getTieneMujerRelationship(getMtDatabase()), succ);
    }

    /**
     * Removes all <code>tieneMujer</code> successors.  When the minimum cardinality
     * is 1, a new successor must be set before commit.
     */
    public final void clearTieneMujer() {
        clearSuccessors(getTieneMujerRelationship(getMtDatabase()));
    }


    // END of Matisse SDL Generated Code

    /*
     * You may add your own code here...
     */

    /**
     * Default constructor provided as an example.
     * You may delete this constructor or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @param db a database
     */
    public Hombre(com.matisse.MtDatabase db) {
        super(getClass(db));
    }

    /**
     * Example of <code>toString</code> method.
     * You may delete this method or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @return a string
     */
    public java.lang.String toString() {
        return super.toString() + "[Hombre]";
    }
}
